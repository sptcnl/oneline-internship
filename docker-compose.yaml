version: "3.7"

x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.5}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    # If you want to use it, outcomment it and replace airflow.cfg with the name of your config file
    # AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    airflow-postgres:
      condition: service_healthy

services:
  # PostgreSQL for Airflow
  airflow-postgres:
    image: postgres:13
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - airflow-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5

  # Redis for Airflow
  redis:
    image: redis:7.2-bookworm
    container_name: redis
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.10.5
    container_name: airflow-webserver
    command: webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    ports:
      - "8090:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      redis:
        condition: service_healthy
      airflow-postgres:
        condition: service_healthy
    restart: always

  # PostgreSQL for DataHub
  datahub-postgres:
    image: postgres:13
    container_name: datahub-postgres
    environment:
      POSTGRES_USER: datahub
      POSTGRES_PASSWORD: datahub
      POSTGRES_DB: datahub-pg
    ports:
      - "5433:5432"
    volumes:
      - datahub-postgres-data:/var/lib/postgresql/data

  # Kafka for DataHub
  broker:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-broker
    environment:
    - KAFKA_BROKER_ID=1
    - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:${DATAHUB_MAPPED_KAFKA_BROKER_PORT:-9092}
    ports:
      - "9092:${DATAHUB_MAPPED_KAFKA_BROKER_PORT:-9092}"
    depends_on:
      zookeeper:
        condition: service_healthy

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:${DATAHUB_CONFLUENT_VERSION:-7.4.0}
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 20s
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      timeout: 5s

  # Elasticsearch for DataHub Search Indexing
  elasticsearch:
    image: elasticsearch:${DATAHUB_SEARCH_TAG:-7.10.1}
    container_name: elasticsearch
    environment:
    - discovery.type=single-node

  # DataHub GMS (Global Metadata Service)
  datahub-gms:
    image: acryldata/datahub-gms:${DATAHUB_VERSION:-head}
    container_name: datahub-gms
    environment:
      EBEAN_DATASOURCE_DRIVER: org.postgresql.Driver
      EBEAN_DATASOURCE_HOST: datahub-pg:5432
      EBEAN_DATASOURCE_URL: jdbc:postgresql://datahub-postgres:5432/datahub-pg
  
  # PostgreSQL for sub
  sub-postgres:
    image: postgres:13
    container_name: sub-postgres
    environment:
      POSTGRES_USER: sub
      POSTGRES_PASSWORD: sub
      POSTGRES_DB: sub-pg
    ports:
      - "5434:5432"
    volumes:
      - sub-postgres-data:/var/lib/postgresql/data

volumes:
  airflow-postgres-data:
  datahub-postgres-data:
  sub-postgres-data: